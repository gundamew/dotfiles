#!/usr/bin/env bash

function git_dir_exists() {
    git rev-parse --is-inside-work-tree 2> /dev/null
}

function git_current_branch_local() {
    git rev-parse --abbrev-ref HEAD
}

function git_changed_files_status() {
    git_status_lines=$(git status --porcelain 2> /dev/null)

    declare -A num_status
    num_status[modified]=0
    num_status[added]=0
    num_status[deleted]=0
    num_status[renamed]=0
    num_status[untracked]=0
    num_status[other]=0

    while IFS='' read -r line; do

        # `git status` is empty, but still receive non-character from somewhere.
        # So check if the length of string is not zero
        if [[ -n $line ]]; then
            status_short=${line:0:2}

            # Keep upper-case letters and question mark
            status_short_clean=${status_short//[![:upper:]\?]/}

            case "$status_short_clean" in
                M )    (( num_status[modified]++ )) ;;
                A )    (( num_status[added]++ )) ;;
                D )    (( num_status[deleted]++ )) ;;
                R )    (( num_status[renamed]++ )) ;;
                \?\? ) (( num_status[untracked]++ )) ;;
                * )    (( num_status[other]++ )) ;;
            esac
        fi
    done <<< "$git_status_lines"

    git_status_prompt=''

    # Generate prompt string
    for status in ${!num_status[@]}; do
        num=${num_status[$status]}

        if [ $num -gt 0 ]; then
            case "$status" in
                modified )  git_status_prompt+="M${num} " ;;
                added )     git_status_prompt+="A${num} " ;;
                deleted )   git_status_prompt+="D${num} " ;;
                renamed )   git_status_prompt+="R${num} " ;;
                untracked ) git_status_prompt+="?${num} " ;;
                other )     git_status_prompt+="*${num} " ;;
            esac
        fi
    done

     # Strip trailing space before return prompt string
    echo ${git_status_prompt/%[[:blank:]]/}
}

function git_local_stat() {
    git_current_branch_local=$(git_current_branch_local)
    git_changed_files_status=$(git_changed_files_status)

    if [[ -z $git_changed_files_status ]]; then
        echo "@$git_current_branch_local"
    else
        echo "@$git_current_branch_local($git_changed_files_status)"
    fi
}
